using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Text;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml;

namespace Dune2Lang
{
    public partial class MainForm : Form
    {
        private bool m_Dirty = false;
        private string m_Text;
        private DataGridViewCellEventArgs m_CurrentCell = null;

        public MainForm()
        {
            InitializeComponent();
            m_Text = Text;

            langDataGridView.RowsAdded += LangDataGridViewOnRowsAdded;
            langDataGridView.RowsRemoved += LangDataGridViewOnRowsRemoved;
        }

        private void LangDataGridViewOnRowsAdded(object sender, DataGridViewRowsAddedEventArgs eventArgs)
        {
            LangDataGridViewRowsChanged();
        }

        private void LangDataGridViewOnRowsRemoved(object sender, DataGridViewRowsRemovedEventArgs dataGridViewRowsRemovedEventArgs)
        {
            LangDataGridViewRowsChanged();
        }

        private void LangDataGridViewRowsChanged()
        {
            // No context menu for the edit row
            for (int i = 0; i < langDataGridView.RowCount; i++)
            {
                if (i == langDataGridView.RowCount - 1)
                {
                    for (int j = 0; j < langDataGridView.ColumnCount; j++)
                        langDataGridView[j, i].ContextMenuStrip = null;

                    langDataGridView.Rows[i].HeaderCell.Value = "";
                }
                else
                {
                    for (int j = 0; j < langDataGridView.ColumnCount; j++)
                        langDataGridView[j, i].ContextMenuStrip = cellContextMenuStrip;

                    langDataGridView.Rows[i].HeaderCell.Value = string.Format("{0}", i + 1);
                }

                langDataGridView.Rows[i].HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
        }

        private bool EnsureKeysAreUnique(ref string offendingKey)
        {
            // Don't count the edit row
            if (langDataGridView.RowCount < 3)
                return true;

            for (int i = 0; i < langDataGridView.RowCount - 2; i++)
            {
                for (int j = i + 1; j < langDataGridView.RowCount - 1; j++)
                {
                    string si = (string) langDataGridView[0, i].Value;
                    string sj = (string) langDataGridView[0, j].Value;

                    if (si == sj)
                    {
                        offendingKey = si;
                        return false;
                    }
                }
            }

            return true;
        }

        private void SaveXml(string filename)
        {
            try
            {
                XmlDocument xmlDoc = new XmlDocument();
                XmlNode rootNode = xmlDoc.CreateElement("language");
                xmlDoc.AppendChild(rootNode);

                // Don't count the edit row
                for (int i = 0; i < langDataGridView.RowCount - 1; i++)
                {
                    XmlNode itemNode = xmlDoc.CreateElement("string");
                    XmlAttribute itemAttribute = xmlDoc.CreateAttribute("key");
                    itemAttribute.Value = (string) langDataGridView[0, i].Value;
                    itemNode.Attributes.Append(itemAttribute);
                    itemNode.InnerText = (string) langDataGridView[1, i].Value;
                    rootNode.AppendChild(itemNode);
                }

                XmlTextWriter writer = new XmlTextWriter(filename, Encoding.UTF8);
                writer.Formatting = Formatting.Indented;
                xmlDoc.Save(writer);
                writer.Close();

            }
            catch
            {
                MessageBox.Show("Failed to save XML file!", m_Text);
            }

            m_Dirty = false;
            Text = m_Text;
        }

        private void SaveHeader(string filename)
        {
            FileStream outputFile = null;
            StreamWriter writer = null;

            try
            {
                outputFile = new FileStream(filename, FileMode.Create, FileAccess.ReadWrite);
                writer = new StreamWriter(outputFile, Encoding.UTF8);
                
                // Write header
                writer.Write("/* AUTOGENERATED FILE - DO NOT MODIFY*/\n");
                writer.Write("#ifndef DUNE2_LANG_H\n");
                writer.Write("#define DUNE2_LANG_H\n\n");

                // Write includes (we need string and vector)
                writer.Write("#include <cstring>\n\n");

                // Define the enumeration
                writer.Write("enum StringID\n{\n");

                // Write the values
                for (int i = 0; i < langDataGridView.RowCount - 1; i++)
                    writer.Write("\t" + (string) langDataGridView[0, i].Value + " = " + i + ",\n");

                writer.Write("}\n\n");

                // Write the storage
                writer.Write("#ifndef DUNE2_LANG_IMPL\n\n");
                writer.Write("extern std::string g_StringNames[" + (langDataGridView.RowCount - 1) + "];\n\n");
                writer.Write("#else\n\n");
                writer.Write("std::string g_StringNames[" + (langDataGridView.RowCount - 1) + "] = ;\n{");

                // Write the values
                for (int i = 0; i < langDataGridView.RowCount - 1; i++)
                    writer.Write("\t\"" + (string)langDataGridView[0, i].Value + "\",\n");
                writer.Write("}\n\n");
                writer.Write("#endif\n\n");
                writer.Write("#endif\n");

                writer.Close();
                outputFile.Close();

            }
            catch
            {
                if (writer != null)
                    writer.Close();

                if (outputFile != null)
                    outputFile.Close();

                MessageBox.Show("Failed to export header file!", m_Text);
            }
        }

        private void LoadXml(string filename)
        {
            try
            {
                XmlDocument xd = new XmlDocument();
                xd.Load(filename);

                langDataGridView.Rows.Clear();
                XmlNode rootNode = xd["language"];
                foreach (var element in rootNode)
                {
                    if (element is XmlNode)
                    {
                        var node = (XmlNode) element;
                        if (node.Name != "string")
                            throw new ArgumentException("Invalid language XML file!", "filename");

                        XmlAttribute itemAttribute = node.Attributes["key"];
                        langDataGridView.Rows.Add(itemAttribute.Value, node.InnerText);
                    }
                }

            }
            catch
            {
                langDataGridView.Rows.Clear();
                MessageBox.Show("Failed to load XML file!", m_Text);
            }

            m_Dirty = false;
            Text = m_Text;
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void saveXMLToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string offendingKey = "";
            if (!EnsureKeysAreUnique(ref offendingKey))
            {
                MessageBox.Show("Failed to save XML file - the key \"" + offendingKey + "\" is used more than once!",
                    m_Text);
                return;
            }

            if (xmlSaveFileDialog.ShowDialog() == DialogResult.OK)
                SaveXml(xmlSaveFileDialog.FileName);
        }

        private void loadXMLToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (xmlOpenFileDialog.ShowDialog() == DialogResult.OK)
                LoadXml(xmlOpenFileDialog.FileName);
        }

        private void langDataGridView_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            m_Dirty = true;
            Text = m_Text + " *";
        }

        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (m_Dirty &&
                MessageBox.Show("You have not saved your latest changes. Are you sure you want to quit?", m_Text,
                    MessageBoxButtons.YesNo) == DialogResult.No)
                e.Cancel = true;
        }

        private void insertRowToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (m_CurrentCell == null)
                return;

            langDataGridView.Rows.Insert(m_CurrentCell.RowIndex, 1);
        }

        private void deleteRowToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (m_CurrentCell == null)
                return;

            langDataGridView.Rows.RemoveAt(m_CurrentCell.RowIndex);
        }

        private void langDataGridView_CellMouseEnter(object sender, DataGridViewCellEventArgs e)
        {
            m_CurrentCell = e;
        }

        private void exportHeaderToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string offendingKey = "";
            if (!EnsureKeysAreUnique(ref offendingKey))
            {
                MessageBox.Show("Failed to save header file - the key \"" + offendingKey + "\" is used more than once!",
                    m_Text);
                return;
            }

            if (headerSaveFileDialog.ShowDialog() == DialogResult.OK)
                SaveHeader(headerSaveFileDialog.FileName);
        }
    }
}
